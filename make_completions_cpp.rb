require 'open-uri'
require 'nokogiri'
require 'json'

BASE_URL = 'http://www.cocos2d-x.org/reference/native-cpp/V3.10'
FILENAME = File.join(File.dirname(__FILE__), './completions_cpp.json')
RUBBISH_FILENAME = File.join(File.dirname(__FILE__), './rubbishes_cpp.txt')

URL_XPATH = '//td/child::a[position()=1]/@href'
CLASS_XPATH = '//div[@class="headertitle"]/div[@class="title"]/text()'

#the format of METHOD_XPATH and PROPERTY_XPATH
ME_PR_PATH_FORMAT = '//child::table[child::tr[child::td[child::h2[child::a[@name="%s"]]]]]/tr[@name="cpp"]/td[@class="memItemRight"]'
METHOD_XPATH = ME_PR_PATH_FORMAT % 'pub-methods'
PROPERTY_XPATH = ME_PR_PATH_FORMAT % 'pub-static-attribs'

#for method and property names
ME_PR_NAME_XPATH = './a[position()=1]/text()'

def parse_url
	puts "parse #{BASE_URL}"
	doc = Nokogiri::HTML(open(File.join(BASE_URL, 'classes.html')))
	doc.xpath(URL_XPATH).map { |url| File.join(BASE_URL, url) }
end

#get method and property names
def parse_me_pr_name(doc, xpath)
	doc.xpath(xpath).map do |node|
		node.xpath(ME_PR_NAME_XPATH).to_s
	end
end

#get class names
def parse_class_name(doc, xpath)
	doc.xpath(xpath).map do |node|
		node.to_s.strip.split(' ').first
	end
end

def parse_page!(completions, url)
	puts "parse #{url}"
	doc = Nokogiri::HTML(open(url))
	completions[:class] += parse_class_name(doc, CLASS_XPATH)
	completions[:property] += parse_me_pr_name(doc, PROPERTY_XPATH)
	completions[:method] += parse_me_pr_name(doc, METHOD_XPATH).map { |name| name+='()' }
	completions
end

def remove_rubbish(completions)
	rubbishes = []
	completions.each { |key , value|
		value.delete_if { |name|
			if 0 != (/\A([a-z]|[A-Z]|_)\w*(\(\))?\Z/ =~ name)
				rubbishes.push(name)
				true
			end
		}
	}
	rubbishes
end

def save_rubbish(rubbishes)
	puts "write #{RUBBISH_FILENAME}"
	open(RUBBISH_FILENAME,"w") do |f|
		f.puts "## This file was generated by make_completions_cpp.rb on #{Time.now.to_s} ##"
		f.puts "## The following nemes was deleted from completions_cpp.json . ##"
		rubbishes.each { |name| f.puts(name) }
	end
end

def finish_completions!(completions)
	completions.each_value do |names|
		names.uniq!
		names.reject! { |name| !name || name.include?(' ') }
	end
	completions.each_value(&:sort!)
end

def save_completions(completions)
	puts "write #{FILENAME}"
	open(FILENAME, 'w') { |f| f.puts JSON.pretty_generate(completions) }
end

def make_completions
	completions = { class: [], property: [], method: [] }
	urls = parse_url
	urls.each { |url| parse_page!(completions, url) }
	rubbishes = remove_rubbish(completions)
	finish_completions!(completions)
	save_completions(completions)
	save_rubbish(rubbishes)
end


if __FILE__ == $0
	#generate completions_cpp.json
	make_completions
end
